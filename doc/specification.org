#+TITLE: Specifications

~stateful-check~ specifications are separated into two separate
portions: an abstract model and a real execution. These two concepts
are represented by different namespaces in keys.

If a key is in the ~model~ namespace (ie. ~:model/args~) then it is
only run during the /abstract model/ phase. These functions should not
have any side effects, as they may be run many times and in unexpected
ways. Additionally, any command results provided to ~:model/X~
functions will be provided as symbolic values (which, during a real
execution, will be replaced by their concrete values).

If a key is in the ~real~ namespace (ie. ~:real/postcondition~) then
it is only run after the /real execution/. These functions may not
interact with the system under test, as they may be run many times and
in unexpected ways. The values provided to these functions will be the
real results of execution in the system under test, however.

The only functions that may interact with the system under test are
the ~:setup~ and ~:cleanup~ function on a specification, and the
~:command~ function on a command specification.

* Commands

A command is a single action which the ~stateful-test~ runner may
perform on the system. It specifies the command's semantics in both
the abstract model and the real execution of the command.

** Required

Commands have one required function:

| Key        | Arguments                           |
| ~:command~ | see optional ~:model/args~ function |

The ~:command~ key specifies what to do when executing this command on
a real system. The arguments to this function are determined by the
~:model/args~ function (specified below).

** Optional

Commands then have a number of optional functions:

| Key               | Arguments | Default value       |
| ~:model/requires~ | ~[state]~ | ~(constantly true)~ |

The ~:model/requires~ key specifies a predicate on the abstract state
that must be true in order for this command to be generated. If this
function returns a falsey value then this command will not be
generated.

| Key           | Arguments | Default value      |
| ~:model/args~ | ~[state]~ | ~(constantly nil)~ |

The ~:model/args~ key specifies a function from the abstract state of
the system to a generator. Values generated by the generator are then
used as the arguments to this function (so the generated value must be
~seq~-able).

| Key                   | Arguments      | Default value       |
| ~:model/precondition~ | ~[state args]~ | ~(constantly true)~ |

The ~:model/precondition~ is very similar to the ~:model/requires~
key, except that it runs after argument generation, and thus can test
a relationship between the abstract state and the generated arguments.
If this function returns falsey then this command will not be
generated.

| Key                 | Arguments             | Default value            |
| ~:model/next-state~ | ~[state args result]~ | ~(fn [state _ _] state)~ |
| ~:real/next-state~  | ~[state args result]~ | ~(fn [state _ _] state)~ |
| ~:next-state~       | ~[state args result]~ | ~(fn [state _ _] state)~ |

The ~:next-state~ functions all behave identically, but they vary in
the arguments they can be given. In all three cases the function is
used to model the effect of running this command on the system by
modifying the state.

The ~:model/next-state~ function is given abstract forms of the state,
arguments and result. The ~:real/next-state~ is given concrete forms
of the state, arguments and result. The ~:next-state~ function is
called during both phases if the phase-specific ~:X/next-state~
function is not declared (note that this means that ~:next-state~
cannot easily differentiate between the phases).

| Key                   | Arguments                             | Default value       |
| ~:real/postcondition~ | ~[prev-state next-state args result]~ | ~(constantly true)~ |

The ~:real/postcondition~ function is how test assertions are
performed. This function is provided with the concrete state before
(~prev-state~) and after (~next-state~) this command's
~:real/next-state~ function is called. If this function returns a
falsey value then command execution will stop and the current
execution will be considered failed.

* System Specifications

System specifications are a representation of a number of commands
which can be performed on an actual system. They specify any
whole-system invariants, as well as setup/cleanup operations and any
extra rules around command generation.

When running ~stateful-check~ it always expects a system specification
to be provided at the top level.

#+BEGIN_SRC clojure
  (is (specification-correct? system-specification))
#+END_SRC

** Required

Specifications have one required key:

| Key         | Shape                    |
| ~:commands~ | map of names to commands |

The ~:commands~ key specifies all of the commands that can be used in
this specification. Each command needs a "name", which will be used in
the command output to identify which command is being run.

The values of the map may either be a command map (see above section
on their structure), or they may be a var which holds a reference to a
command map. If the value is a var then it will be dereferenced
whenever the command is generated (this permits the var to be
redefined without needing to also redefine the spec).

** Optional

Specifications also have a number of optional functions:

| Key                       | Arguments | Default value                                 |
| ~:model/generate-command~ | ~[state]~ | ~(gen/elements (:keys system-specification))~ |

The ~:model/generate-command~ function is used to determine which
command to add to the command list next. The generator returned by
~:model/generate-command~ is used to generate the name of the next
command (which then goes through ordinary command generation).

In general, if your commands are set up appropriately then you will
not need to declare a ~:model/generate-command~ function. It can be
helpful for changing the distribution of generated commands, or for
increasing the efficiency of generation in some cases.

| Key        | Arguments | Default value |
| ~:setup~   | none      | ~nil~         |
| ~:cleanup~ | ~[state]~ | ~nil~         |

The ~:setup~ function is run prior to the real execution phase. It
should perform any one-time setup tasks which are necessary for
repeatability.

The ~:cleanup~ function is run immediately after the real execution
phase. It is always run (irrespective of the pass/fail state of the
test) and should clean up any necessary resources.

| Key                    | Arguments         | Default value      |
| ~:model/initial-state~ | none or ~[setup]~ | ~(constantly nil)~ |
| ~:real/initial-state~  | none or ~[setup]~ | ~(constantly nil)~ |
| ~:initial-state~       | none or ~[setup]~ | ~(constantly nil)~ |

The ~:X/initial-state~ functions are used to seed the ~state~ value,
which is then used extensively throughout command generation and
execution.

If a ~:setup~ function has been provided then the
~:model/initial-state~ function will be passed a symbolic value
representing the result of the setup, and ~:real/initial-state~ will
be provided with the concrete value of the setup. This is necessary
for when ~:setup~ allocates resources which must be used during your
tests, or closed in ~:cleanup~ (database handles, file handles, etc.).

As with the command's ~:next-state~ function, the ~:initial-state~
function will be used as a fallback if the relevant function is not
specified.

* Symbolic values

Symbolic values are used during the abstract model phase in order to
represent the results of real executions of commands. When they are
used as the arguments to a command they are replaced by their concrete
values.

The only operation permitted on symbolic values is to lookup a key
within them. During the real execution phase the corresponding key
will be looked up in the concrete value (so ~(:key symbolic-value)~
will, during real execution, be ~(:key concrete-value)~).
